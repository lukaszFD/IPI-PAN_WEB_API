/*
Deployment script for GlobalRepository

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "GlobalRepository"
:setvar DefaultFilePrefix "GlobalRepository"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column Password on table [gr_user].[Users] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The type for column Password in table [gr_user].[Users] is currently  NVARCHAR (200) NULL but is being changed to  VARBINARY (100) NOT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  VARBINARY (100) NOT NULL.

The column Username on table [gr_user].[Users] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [gr_user].[Users])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping unnamed constraint on [gr_user].[Users]...';


GO
ALTER TABLE [gr_user].[Users] DROP CONSTRAINT [DF__Users__CreationD__25A691D2];


GO
PRINT N'Dropping unnamed constraint on [gr_user].[Users]...';


GO
ALTER TABLE [gr_user].[Users] DROP CONSTRAINT [DF__Users__ExternalI__278EDA44];


GO
PRINT N'Dropping unnamed constraint on [repository].[Accounts]...';


GO
ALTER TABLE [repository].[Accounts] DROP CONSTRAINT [FK__Accounts__UserId__09FE775D];


GO
PRINT N'Starting rebuilding table [gr_user].[Users]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [gr_user].[tmp_ms_xx_Users] (
    [ExternalId]   UNIQUEIDENTIFIER DEFAULT NEWID() NOT NULL,
    [UserId]       INT              IDENTITY (1, 1) NOT NULL,
    [Description]  NVARCHAR (200)   NULL,
    [Username]     NVARCHAR (200)   NOT NULL,
    [Password]     VARBINARY (100)  NOT NULL,
    [Type]         CHAR (1)         NOT NULL,
    [CreationDate] DATETIME         DEFAULT (getdate()) NOT NULL,
    [EditDate]     DATETIME         NULL,
    [DeleteDate]   DATETIME         NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UQ_User1] UNIQUE NONCLUSTERED ([Username] ASC, [Type] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [gr_user].[Users])
    BEGIN
        SET IDENTITY_INSERT [gr_user].[tmp_ms_xx_Users] ON;
        INSERT INTO [gr_user].[tmp_ms_xx_Users] ([UserId], [ExternalId], [Description], [Username], [Password], [Type], [CreationDate], [EditDate], [DeleteDate])
        SELECT   [UserId],
                 [ExternalId],
                 [Description],
                 [Username],
                 CAST ([Password] AS VARBINARY (100)),
                 [Type],
                 [CreationDate],
                 [EditDate],
                 [DeleteDate]
        FROM     [gr_user].[Users]
        ORDER BY [UserId] ASC;
        SET IDENTITY_INSERT [gr_user].[tmp_ms_xx_Users] OFF;
    END

DROP TABLE [gr_user].[Users];

EXECUTE sp_rename N'[gr_user].[tmp_ms_xx_Users]', N'Users';

EXECUTE sp_rename N'[gr_user].[tmp_ms_xx_constraint_UQ_User1]', N'UQ_User', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [audit].[Accounts]...';


GO
CREATE TABLE [audit].[Accounts] (
    [AudID]               INT              IDENTITY (1, 1) NOT NULL,
    [UserName]            NVARCHAR (100)   NULL,
    [DateFrom]            DATETIME         NOT NULL,
    [DateTo]              DATETIME         NULL,
    [ExternalId]          UNIQUEIDENTIFIER NOT NULL,
    [AccountId]           INT              NOT NULL,
    [NEW_CountryId]       INT              NULL,
    [OLD_CountryId]       INT              NULL,
    [NEW_UserId]          INT              NULL,
    [OLD_UserId]          INT              NULL,
    [NEW_SystemId]        INT              NULL,
    [OLD_SystemId]        INT              NULL,
    [NEW_ServerId]        INT              NULL,
    [OLD_ServerId]        INT              NULL,
    [NEW_Name]            NVARCHAR (50)    NOT NULL,
    [OLD_Name]            NVARCHAR (50)    NOT NULL,
    [NEW_Description]     NVARCHAR (200)   NULL,
    [OLD_Description]     NVARCHAR (200)   NULL,
    [NEW_Type]            CHAR (1)         NULL,
    [OLD_Type]            CHAR (1)         NULL,
    [NEW_PasswordExpires] DATETIME         NULL,
    [OLD_PasswordExpires] DATETIME         NULL,
    [NEW_Tofix]           CHAR (1)         NULL,
    [OLD_Tofix]           CHAR (1)         NULL,
    [NEW_RecAccountId]    INT              NULL,
    [OLD_RecAccountId]    INT              NULL,
    PRIMARY KEY CLUSTERED ([AudID] ASC)
);


GO
PRINT N'Creating [audit].[CountryRegion]...';


GO
CREATE TABLE [audit].[CountryRegion] (
    [AudID]                 INT            IDENTITY (1, 1) NOT NULL,
    [UserName]              NVARCHAR (100) NULL,
    [DateFrom]              DATETIME       NOT NULL,
    [DateTo]                DATETIME       NULL,
    [CountryId]             INT            NULL,
    [NEW_CountryRegionCode] NVARCHAR (3)   NULL,
    [OLD_CountryRegionCode] NVARCHAR (3)   NULL,
    [NEW_Name]              NVARCHAR (50)  NULL,
    [OLD_Name]              NVARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([AudID] ASC)
);


GO
PRINT N'Creating [audit].[Servers]...';


GO
CREATE TABLE [audit].[Servers] (
    [AudID]                      INT              IDENTITY (1, 1) NOT NULL,
    [UserName]                   NVARCHAR (100)   NULL,
    [DateFrom]                   DATETIME         NOT NULL,
    [DateTo]                     DATETIME         NULL,
    [ExternalId]                 UNIQUEIDENTIFIER NOT NULL,
    [ServerId]                   INT              NOT NULL,
    [NEW_Name]                   NVARCHAR (50)    NULL,
    [OLD_Name]                   NVARCHAR (50)    NULL,
    [NEW_Host]                   NVARCHAR (50)    NULL,
    [OLD_Host]                   NVARCHAR (50)    NULL,
    [NEW_CountryId]              INT              NULL,
    [OLD_CountryId]              INT              NULL,
    [NEW_Model]                  NVARCHAR (50)    NULL,
    [OLD_Model]                  NVARCHAR (50)    NULL,
    [NEW_SerialNumber]           INT              NULL,
    [OLD_SerialNumber]           INT              NULL,
    [NEW_TechSupport]            CHAR (1)         NULL,
    [OLD_TechSupport]            CHAR (1)         NULL,
    [NEW_WarrantyExpirationDate] DATE             NULL,
    [OLD_WarrantyExpirationDate] DATE             NULL,
    [NEW_CPUType]                SMALLINT         NULL,
    [OLD_CPUType]                SMALLINT         NULL,
    [NEW_RAM]                    SMALLINT         NULL,
    [OLD_RAM]                    SMALLINT         NULL,
    [NEW_HardDisk]               CHAR (1)         NULL,
    [OLD_HardDisk]               CHAR (1)         NULL,
    [NEW_UPS]                    CHAR (1)         NULL,
    [OLD_UPS]                    CHAR (1)         NULL,
    [NEW_AntivirusSoftware]      CHAR (1)         NULL,
    [OLD_AntivirusSoftware]      CHAR (1)         NULL,
    [NEW_RecServerId]            INT              NULL,
    [OLD_RecServerId]            INT              NULL,
    PRIMARY KEY CLUSTERED ([AudID] ASC)
);


GO
PRINT N'Creating [audit].[Systems]...';


GO
CREATE TABLE [audit].[Systems] (
    [AudID]                  INT              IDENTITY (1, 1) NOT NULL,
    [UserName]               NVARCHAR (100)   NULL,
    [DateFrom]               DATETIME         NOT NULL,
    [DateTo]                 DATETIME         NULL,
    [ExternalId]             UNIQUEIDENTIFIER NOT NULL,
    [SystemId]               INT              NOT NULL,
    [NEW_CompanyName]        NVARCHAR (50)    NULL,
    [OLD_CompanyName]        NVARCHAR (50)    NULL,
    [NEW_Name]               NVARCHAR (50)    NULL,
    [OLD_Name]               NVARCHAR (50)    NULL,
    [NEW_Version]            NVARCHAR (50)    NULL,
    [OLD_Version]            NVARCHAR (50)    NULL,
    [NEW_TechSupport]        CHAR (1)         NULL,
    [OLD_TechSupport]        CHAR (1)         NULL,
    [NEW_TechSupportExpDate] DATE             NULL,
    [OLD_TechSupportExpDate] DATE             NULL,
    [NEW_RecSystemId]        INT              NULL,
    [OLD_RecSystemId]        INT              NULL,
    PRIMARY KEY CLUSTERED ([AudID] ASC)
);


GO
PRINT N'Creating unnamed constraint on [audit].[Accounts]...';


GO
ALTER TABLE [audit].[Accounts]
    ADD DEFAULT (stuff(suser_sname(),(1),charindex('\',suser_sname()),'')) FOR [UserName];


GO
PRINT N'Creating unnamed constraint on [audit].[Accounts]...';


GO
ALTER TABLE [audit].[Accounts]
    ADD DEFAULT (getdate()) FOR [DateTo];


GO
PRINT N'Creating unnamed constraint on [audit].[CountryRegion]...';


GO
ALTER TABLE [audit].[CountryRegion]
    ADD DEFAULT (stuff(suser_sname(),(1),charindex('\',suser_sname()),'')) FOR [UserName];


GO
PRINT N'Creating unnamed constraint on [audit].[CountryRegion]...';


GO
ALTER TABLE [audit].[CountryRegion]
    ADD DEFAULT (getdate()) FOR [DateTo];


GO
PRINT N'Creating unnamed constraint on [audit].[Servers]...';


GO
ALTER TABLE [audit].[Servers]
    ADD DEFAULT (stuff(suser_sname(),(1),charindex('\',suser_sname()),'')) FOR [UserName];


GO
PRINT N'Creating unnamed constraint on [audit].[Servers]...';


GO
ALTER TABLE [audit].[Servers]
    ADD DEFAULT (getdate()) FOR [DateTo];


GO
PRINT N'Creating unnamed constraint on [audit].[Systems]...';


GO
ALTER TABLE [audit].[Systems]
    ADD DEFAULT (stuff(suser_sname(),(1),charindex('\',suser_sname()),'')) FOR [UserName];


GO
PRINT N'Creating unnamed constraint on [audit].[Systems]...';


GO
ALTER TABLE [audit].[Systems]
    ADD DEFAULT (getdate()) FOR [DateTo];


GO
PRINT N'Creating unnamed constraint on [repository].[Accounts]...';


GO
ALTER TABLE [repository].[Accounts] WITH NOCHECK
    ADD FOREIGN KEY ([UserId]) REFERENCES [gr_user].[Users] ([UserId]);


GO
PRINT N'Creating unnamed constraint on [gr_user].[Users]...';


GO
ALTER TABLE [gr_user].[Users] WITH NOCHECK
    ADD CHECK ([Type]='A' OR [Type]='N');


GO
PRINT N'Creating [gr_user].[After_U_Users_trg]...';


GO
CREATE TRIGGER gr_user.After_U_Users_trg
ON gr_user.[Users]
AFTER UPDATE
AS 
BEGIN
SET NOCOUNT ON;

	UPDATE a
	SET a.EditDate = getdate()
	FROM 
		gr_user.[Users] a 
		JOIN inserted i ON i.[UserId] = a.[UserId]
END
GO
PRINT N'Creating [repository].[After_U_Accounts_trg]...';


GO

CREATE TRIGGER [repository].[After_U_Accounts_trg]
ON [repository].[Accounts]
AFTER UPDATE
AS 
BEGIN TRY
begin tran aud
	   INSERT INTO [audit].[Accounts]
	   (   
		  [DateFrom],
		  [ExternalId],
		  [AccountId],
		  [NEW_CountryId],
		  [OLD_CountryId],
		  [NEW_UserId],
		  [OLD_UserId],
		  [NEW_SystemId],
		  [OLD_SystemId],
		  [NEW_ServerId],
		  [OLD_ServerId],
		  [NEW_Name],
		  [OLD_Name],
		  [NEW_Description],
		  [OLD_Description],
		  [NEW_Type],
		  [OLD_Type],
		  [NEW_PasswordExpires],
		  [OLD_PasswordExpires],
		  [NEW_Tofix],
		  [OLD_Tofix],
		  [NEW_RecAccountId],
		  [OLD_RecAccountId]
		)
		SELECT 
			isnull(a.EditDate,a.CreationDate),
			a.ExternalId,
			a.AccountId,
			a.CountryId,
			d.CountryId,
			a.UserId,
			d.UserId,
			a.SystemId,
			d.SystemId,
			a.ServerId,
			d.ServerId,
			a.Name,
			d.Name,
			a.Description,
			d.Description,
			a.Type,
			d.Type,
			a.PasswordExpires,
			d.PasswordExpires,
			a.Tofix,
			d.Tofix,
			a.RecAccountId,
			d.RecAccountId
		FROM 
			[repository].Accounts a 
			JOIN  deleted d ON d.AccountId = a.AccountId
commit tran aud 

begin tran upd
		UPDATE a
		SET a.EditDate = getdate()
		FROM 
			[repository].Accounts a 
			JOIN deleted d ON d.AccountId = a.AccountId
commit tran upd
END TRY
BEGIN CATCH


			EXECUTE [error].[AddErrorMessage] 
				@schemaName = 'repository',
				@tableName = 'Accounts', 
				@columnName = null,
				@columnId = null 
END CATCH
GO
EXECUTE sp_settriggerorder @triggername = N'[repository].[After_U_Accounts_trg]', @order = N'first', @stmttype = N'update';


GO
PRINT N'Creating [repository].[After_U_CountryRegion_trg]...';


GO

CREATE TRIGGER [repository].[After_U_CountryRegion_trg]
ON [repository].[CountryRegion]
AFTER UPDATE
AS 
BEGIN TRY
	BEGIN TRAN aud
		INSERT INTO [audit].[CountryRegion]
		(
			[DateTo],
			[CountryId],
			[NEW_CountryRegionCode],
			[OLD_CountryRegionCode],
			[NEW_Name],
			[OLD_Name]
		)
		SELECT 
			 isnull(c.EditDate,c.CreationDate)
			,c.[CountryId]
			,c.[CountryRegionCode]
			,d.[CountryRegionCode]
			,c.[Name]
			,d.[Name]
		FROM 
			[repository].[CountryRegion] c
			JOIN  deleted d ON d.[CountryId] = c.[CountryId]
	COMMIT TRAN aud

	BEGIN TRAN upd
		UPDATE a
		SET a.EditDate = getdate()
		FROM 
			[repository].[CountryRegion] a 
			JOIN deleted d ON d.[CountryId] = a.[CountryId]
	COMMIT TRAN upd
END TRY
	BEGIN CATCH
			EXECUTE [error].[AddErrorMessage] 
				@schemaName = 'repository',
				@tableName = 'Accounts', 
				@columnName = null,
				@columnId = null 
END CATCH
GO
PRINT N'Creating [repository].[After_U_Server_trg]...';


GO

CREATE TRIGGER [repository].After_U_Server_trg
ON [repository].[Servers]
AFTER UPDATE
AS 
BEGIN TRY
begin tran aud
		INSERT INTO [audit].[Servers]
		(
		    [DateFrom],
		    [ExternalId],
		    [ServerId],
		    [NEW_Name],
		    [OLD_Name],
		    [NEW_Host],
		    [OLD_Host],
		    [NEW_CountryId],
		    [OLD_CountryId],
		    [NEW_Model],
		    [OLD_Model],
		    [NEW_SerialNumber],
		    [OLD_SerialNumber],
		    [NEW_TechSupport],
		    [OLD_TechSupport],
		    [NEW_WarrantyExpirationDate],
		    [OLD_WarrantyExpirationDate],
		    [NEW_CPUType],
		    [OLD_CPUType],
		    [NEW_RAM],
		    [OLD_RAM],
		    [NEW_HardDisk],
		    [OLD_HardDisk],
		    [NEW_UPS],
		    [OLD_UPS],
		    [NEW_AntivirusSoftware],
		    [OLD_AntivirusSoftware],
			[NEW_RecServerId],
			[OLD_RecServerId]
		)

		SELECT 
			isnull(s.EditDate,s.CreationDate),
			s.ExternalId,
			s.[ServerId],
			s.[Name],
			d.[Name],
			s.[Host],
			d.[Host],
			s.[CountryId],
			d.[CountryId],
			s.[Model],
			d.[Model],
			s.[SerialNumber],
			d.[SerialNumber],
			s.[TechSupport],
			d.[TechSupport],
			s.[WarrantyExpirationDate],
			d.[WarrantyExpirationDate],
			s.[CPUType],
			d.[CPUType],
			s.[RAM],
			d.[RAM],
			s.[HardDisk],
			d.[HardDisk],
			s.[UPS],
			d.[UPS],
			s.[AntivirusSoftware],
			d.[AntivirusSoftware],
			s.[RecServerId],
			d.[RecServerId]
		FROM 
			[repository].[Servers] s
			JOIN  deleted d ON d.[ServerId] = s.[ServerId]
commit tran aud 

begin tran upd
		UPDATE a
		SET a.EditDate = getdate()
		FROM 
			[repository].Servers a 
			join deleted d ON d.ServerId = a.ServerId
commit tran upd
END TRY
	BEGIN CATCH

	if @@trancount > 0
	rollback;

	EXECUTE [error].[AddErrorMessage] 
		@schemaName = 'repository',
		@tableName = 'Servers', 
		@columnName = null,
		@columnId = null 
END CATCH
GO
EXECUTE sp_settriggerorder @triggername = N'[repository].[After_U_Server_trg]', @order = N'first', @stmttype = N'update';


GO
PRINT N'Creating [repository].[After_U_System_trg]...';


GO

CREATE TRIGGER [repository].[After_U_System_trg]
ON [repository].[Systems]
AFTER UPDATE
AS 
BEGIN TRY
begin tran aud
	   INSERT INTO [audit].[Systems]
	   (   
			[DateFrom],
			[ExternalId],
			[SystemId],
			[NEW_CompanyName],
			[OLD_CompanyName],
			[NEW_Name],
			[OLD_Name],
			[NEW_Version],
			[OLD_Version],
			[NEW_TechSupport],
			[OLD_TechSupport],
			[NEW_TechSupportExpDate],
			[OLD_TechSupportExpDate],
			[NEW_RecSystemId],
			[OLD_RecSystemId]
	   )
	   SELECT 
	        isnull(s.EditDate,s.CreationDate),
			s.[ExternalId],
			s.[SystemId],
			s.[CompanyName],
			d.[CompanyName],
			s.[Name],
			d.[Name],
			s.[Version],
			d.[Version],
			s.[TechSupport],
			d.[TechSupport],
			s.[TechSupportExpDate],
			d.[TechSupportExpDate],
			s.[RecSystemId],
			d.[RecSystemId]
		FROM 
			[repository].[Systems] s
			JOIN deleted d ON d.SystemId = s.SystemId
commit tran aud 

begin tran upd
		UPDATE a
		SET a.EditDate = getdate()
		FROM 
			[repository].Systems a 
			JOIN deleted d ON d.SystemId = a.SystemId
commit tran upd
END TRY
	BEGIN CATCH

	if @@trancount > 0
	rollback

	EXECUTE [error].[AddErrorMessage] 
		@schemaName = 'repository',
		@tableName = 'Systems', 
		@columnName = null,
		@columnId = null 
END CATCH
GO
EXECUTE sp_settriggerorder @triggername = N'[repository].[After_U_System_trg]', @order = N'first', @stmttype = N'update';


GO
PRINT N'Creating [gr_user].[Users].[ExternalId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Id retrieved from the database that performs the authorization.', @level0type = N'SCHEMA', @level0name = N'gr_user', @level1type = N'TABLE', @level1name = N'Users', @level2type = N'COLUMN', @level2name = N'ExternalId';


GO
PRINT N'Creating [gr_user].[Users].[UserId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'User ID on the database. In relation to [GlobalRepository]. [repository].[Accounts].[UserId]', @level0type = N'SCHEMA', @level0name = N'gr_user', @level1type = N'TABLE', @level1name = N'Users', @level2type = N'COLUMN', @level2name = N'UserId';


GO
PRINT N'Creating [gr_user].[Users].[Description].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Short description of the user.', @level0type = N'SCHEMA', @level0name = N'gr_user', @level1type = N'TABLE', @level1name = N'Users', @level2type = N'COLUMN', @level2name = N'Description';


GO
PRINT N'Creating [gr_user].[Users].[Type].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'User type: A - administrator, N - normal ', @level0type = N'SCHEMA', @level0name = N'gr_user', @level1type = N'TABLE', @level1name = N'Users', @level2type = N'COLUMN', @level2name = N'Type';


GO
PRINT N'Creating [gr_user].[Users].[CreationDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date of creation of the user. ', @level0type = N'SCHEMA', @level0name = N'gr_user', @level1type = N'TABLE', @level1name = N'Users', @level2type = N'COLUMN', @level2name = N'CreationDate';


GO
PRINT N'Creating [gr_user].[Users].[EditDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The date of editing the user. ', @level0type = N'SCHEMA', @level0name = N'gr_user', @level1type = N'TABLE', @level1name = N'Users', @level2type = N'COLUMN', @level2name = N'EditDate';


GO
PRINT N'Creating [gr_user].[Users].[DeleteDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date of removal of the user. ', @level0type = N'SCHEMA', @level0name = N'gr_user', @level1type = N'TABLE', @level1name = N'Users', @level2type = N'COLUMN', @level2name = N'DeleteDate';


GO
PRINT N'Creating [audit].[Accounts].[AudID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Unique id for the table', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'AudID';


GO
PRINT N'Creating [audit].[Accounts].[UserName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The user who made the change ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'UserName';


GO
PRINT N'Creating [audit].[Accounts].[DateFrom].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date From', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'DateFrom';


GO
PRINT N'Creating [audit].[Accounts].[DateTo].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date to', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'DateTo';


GO
PRINT N'Creating [audit].[Accounts].[ExternalId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier transmitted in web communication for [repository].[Accounts] table.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'ExternalId';


GO
PRINT N'Creating [audit].[Accounts].[AccountId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Unique id for [repository].[Accounts] table.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'AccountId';


GO
PRINT N'Creating [audit].[Accounts].[NEW_CountryId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Account location - country id. In relation to [GlobalRepository].[repository].[CountryRegion].[CountryId].', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'NEW_CountryId';


GO
PRINT N'Creating [audit].[Accounts].[OLD_CountryId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Account location - country id. In relation to [GlobalRepository].[repository].[CountryRegion].[CountryId].', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'OLD_CountryId';


GO
PRINT N'Creating [audit].[Accounts].[NEW_UserId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - User ID on a database.  In relation to [GlobalRepository].[gr_user].[Users].[UserId]', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'NEW_UserId';


GO
PRINT N'Creating [audit].[Accounts].[OLD_UserId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - User ID on a database.  In relation to [GlobalRepository].[gr_user].[Users].[UserId]', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'OLD_UserId';


GO
PRINT N'Creating [audit].[Accounts].[NEW_SystemId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - System identifier from the database.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'NEW_SystemId';


GO
PRINT N'Creating [audit].[Accounts].[OLD_SystemId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - System identifier from the database.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'OLD_SystemId';


GO
PRINT N'Creating [audit].[Accounts].[NEW_ServerId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - The server identifier on the database. In relation to [GlobalRepository].[repository].[Servers].[ServerId]', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'NEW_ServerId';


GO
PRINT N'Creating [audit].[Accounts].[OLD_ServerId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - The server identifier on the database. In relation to [GlobalRepository].[repository].[Servers].[ServerId]', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'OLD_ServerId';


GO
PRINT N'Creating [audit].[Accounts].[NEW_Name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Account name. ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'NEW_Name';


GO
PRINT N'Creating [audit].[Accounts].[OLD_Name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Account name. ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'OLD_Name';


GO
PRINT N'Creating [audit].[Accounts].[NEW_Description].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Short description of the account. ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'NEW_Description';


GO
PRINT N'Creating [audit].[Accounts].[OLD_Description].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Short description of the account. ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'OLD_Description';


GO
PRINT N'Creating [audit].[Accounts].[NEW_Type].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Account type. U - user account, D - database account. ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'NEW_Type';


GO
PRINT N'Creating [audit].[Accounts].[OLD_Type].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Account type. U - user account, D - database account. ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'OLD_Type';


GO
PRINT N'Creating [audit].[Accounts].[NEW_PasswordExpires].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Password expiration date. Accounts that have invalid passwords have the Tofix flag set to Y.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'NEW_PasswordExpires';


GO
PRINT N'Creating [audit].[Accounts].[OLD_PasswordExpires].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Password expiration date. Accounts that have invalid passwords have the Tofix flag set to Y.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'OLD_PasswordExpires';


GO
PRINT N'Creating [audit].[Accounts].[NEW_Tofix].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Flag indicating accounts that have missing attributes. ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'NEW_Tofix';


GO
PRINT N'Creating [audit].[Accounts].[OLD_Tofix].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Flag indicating accounts that have missing attributes. ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'OLD_Tofix';


GO
PRINT N'Creating [audit].[Accounts].[NEW_RecAccountId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Identity reconciliation of data.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'NEW_RecAccountId';


GO
PRINT N'Creating [audit].[Accounts].[OLD_RecAccountId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Identity reconciliation of data.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Accounts', @level2type = N'COLUMN', @level2name = N'OLD_RecAccountId';


GO
PRINT N'Creating [audit].[CountryRegion].[AudID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Unique id for the table', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'CountryRegion', @level2type = N'COLUMN', @level2name = N'AudID';


GO
PRINT N'Creating [audit].[CountryRegion].[UserName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The user who made the change ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'CountryRegion', @level2type = N'COLUMN', @level2name = N'UserName';


GO
PRINT N'Creating [audit].[CountryRegion].[DateFrom].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date From', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'CountryRegion', @level2type = N'COLUMN', @level2name = N'DateFrom';


GO
PRINT N'Creating [audit].[CountryRegion].[DateTo].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date to', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'CountryRegion', @level2type = N'COLUMN', @level2name = N'DateTo';


GO
PRINT N'Creating [audit].[CountryRegion].[CountryId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Unique id for [repository].[CountryRegion] table.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'CountryRegion', @level2type = N'COLUMN', @level2name = N'CountryId';


GO
PRINT N'Creating [audit].[CountryRegion].[NEW_CountryRegionCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Abbreviated country code. ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'CountryRegion', @level2type = N'COLUMN', @level2name = N'NEW_CountryRegionCode';


GO
PRINT N'Creating [audit].[CountryRegion].[OLD_CountryRegionCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Abbreviated country code. ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'CountryRegion', @level2type = N'COLUMN', @level2name = N'OLD_CountryRegionCode';


GO
PRINT N'Creating [audit].[CountryRegion].[NEW_Name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Full name of the country.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'CountryRegion', @level2type = N'COLUMN', @level2name = N'NEW_Name';


GO
PRINT N'Creating [audit].[CountryRegion].[OLD_Name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Full name of the country.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'CountryRegion', @level2type = N'COLUMN', @level2name = N'OLD_Name';


GO
PRINT N'Creating [audit].[Servers].[AudID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Unique id for the table', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'AudID';


GO
PRINT N'Creating [audit].[Servers].[UserName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The user who made the change ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'UserName';


GO
PRINT N'Creating [audit].[Servers].[DateFrom].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date From', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'DateFrom';


GO
PRINT N'Creating [audit].[Servers].[DateTo].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date to', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'DateTo';


GO
PRINT N'Creating [audit].[Servers].[ExternalId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier transmitted in web communication for [repository].[Servers] table.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'ExternalId';


GO
PRINT N'Creating [audit].[Servers].[ServerId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Unique id for [repository].[Servers] table.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'ServerId';


GO
PRINT N'Creating [audit].[Servers].[NEW_Name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Server name.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'NEW_Name';


GO
PRINT N'Creating [audit].[Servers].[OLD_Name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Server name.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'OLD_Name';


GO
PRINT N'Creating [audit].[Servers].[NEW_Host].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Server host name.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'NEW_Host';


GO
PRINT N'Creating [audit].[Servers].[OLD_Host].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Server host name.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'OLD_Host';


GO
PRINT N'Creating [audit].[Servers].[NEW_CountryId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Server location - country id. In relation to [GlobalRepository].[repository].[CountryRegion].[CountryId].[CountryId].', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'NEW_CountryId';


GO
PRINT N'Creating [audit].[Servers].[OLD_CountryId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Server location - country id. In relation to [GlobalRepository].[repository].[CountryRegion].[CountryId].[CountryId].', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'OLD_CountryId';


GO
PRINT N'Creating [audit].[Servers].[NEW_Model].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Server model.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'NEW_Model';


GO
PRINT N'Creating [audit].[Servers].[OLD_Model].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Server model.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'OLD_Model';


GO
PRINT N'Creating [audit].[Servers].[NEW_SerialNumber].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Serial number of the server', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'NEW_SerialNumber';


GO
PRINT N'Creating [audit].[Servers].[OLD_SerialNumber].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Serial number of the server', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'OLD_SerialNumber';


GO
PRINT N'Creating [audit].[Servers].[NEW_TechSupport].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Technical support for the server. The default value is false. ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'NEW_TechSupport';


GO
PRINT N'Creating [audit].[Servers].[OLD_TechSupport].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Technical support for the server. The default value is false. ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'OLD_TechSupport';


GO
PRINT N'Creating [audit].[Servers].[NEW_WarrantyExpirationDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Warranty expiration date. ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'NEW_WarrantyExpirationDate';


GO
PRINT N'Creating [audit].[Servers].[OLD_WarrantyExpirationDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Warranty expiration date. ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'OLD_WarrantyExpirationDate';


GO
PRINT N'Creating [audit].[Servers].[NEW_CPUType].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Processor type ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'NEW_CPUType';


GO
PRINT N'Creating [audit].[Servers].[OLD_CPUType].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Processor type ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'OLD_CPUType';


GO
PRINT N'Creating [audit].[Servers].[NEW_RAM].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Number of ram memories on the server (MB)', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'NEW_RAM';


GO
PRINT N'Creating [audit].[Servers].[OLD_RAM].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Number of ram memories on the server (MB)', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'OLD_RAM';


GO
PRINT N'Creating [audit].[Servers].[NEW_HardDisk].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - The type of disk used on the server. D - normal drive, S - SSD', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'NEW_HardDisk';


GO
PRINT N'Creating [audit].[Servers].[OLD_HardDisk].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - The type of disk used on the server. D - normal drive, S - SSD', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'OLD_HardDisk';


GO
PRINT N'Creating [audit].[Servers].[NEW_UPS].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Security of the server in elenctic energy. The default value is false. ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'NEW_UPS';


GO
PRINT N'Creating [audit].[Servers].[OLD_UPS].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Security of the server in elenctic energy. The default value is false. ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'OLD_UPS';


GO
PRINT N'Creating [audit].[Servers].[NEW_AntivirusSoftware].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Anti-virus software. default value is false. ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'NEW_AntivirusSoftware';


GO
PRINT N'Creating [audit].[Servers].[OLD_AntivirusSoftware].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Anti-virus software. default value is false. ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'OLD_AntivirusSoftware';


GO
PRINT N'Creating [audit].[Servers].[NEW_RecServerId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Identity reconciliation of data.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'NEW_RecServerId';


GO
PRINT N'Creating [audit].[Servers].[OLD_RecServerId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Identity reconciliation of data.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Servers', @level2type = N'COLUMN', @level2name = N'OLD_RecServerId';


GO
PRINT N'Creating [audit].[Systems].[AudID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Unique id for the table', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Systems', @level2type = N'COLUMN', @level2name = N'AudID';


GO
PRINT N'Creating [audit].[Systems].[UserName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The user who made the change ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Systems', @level2type = N'COLUMN', @level2name = N'UserName';


GO
PRINT N'Creating [audit].[Systems].[DateFrom].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date From', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Systems', @level2type = N'COLUMN', @level2name = N'DateFrom';


GO
PRINT N'Creating [audit].[Systems].[DateTo].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Date to', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Systems', @level2type = N'COLUMN', @level2name = N'DateTo';


GO
PRINT N'Creating [audit].[Systems].[ExternalId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The identifier transmitted in web communication for [repository].[Systems] table.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Systems', @level2type = N'COLUMN', @level2name = N'ExternalId';


GO
PRINT N'Creating [audit].[Systems].[SystemId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Unique id for [repository].[Systems] table.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Systems', @level2type = N'COLUMN', @level2name = N'SystemId';


GO
PRINT N'Creating [audit].[Systems].[NEW_CompanyName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Name of the system provider', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Systems', @level2type = N'COLUMN', @level2name = N'NEW_CompanyName';


GO
PRINT N'Creating [audit].[Systems].[OLD_CompanyName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Name of the system provider', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Systems', @level2type = N'COLUMN', @level2name = N'OLD_CompanyName';


GO
PRINT N'Creating [audit].[Systems].[NEW_Name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - System name', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Systems', @level2type = N'COLUMN', @level2name = N'NEW_Name';


GO
PRINT N'Creating [audit].[Systems].[OLD_Name].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - System name', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Systems', @level2type = N'COLUMN', @level2name = N'OLD_Name';


GO
PRINT N'Creating [audit].[Systems].[NEW_Version].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - System version', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Systems', @level2type = N'COLUMN', @level2name = N'NEW_Version';


GO
PRINT N'Creating [audit].[Systems].[OLD_Version].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - System version', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Systems', @level2type = N'COLUMN', @level2name = N'OLD_Version';


GO
PRINT N'Creating [audit].[Systems].[NEW_TechSupport].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Flag informing that there is support for the system. Default value is false.  ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Systems', @level2type = N'COLUMN', @level2name = N'NEW_TechSupport';


GO
PRINT N'Creating [audit].[Systems].[OLD_TechSupport].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Flag informing that there is support for the system. Default value is false.  ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Systems', @level2type = N'COLUMN', @level2name = N'OLD_TechSupport';


GO
PRINT N'Creating [audit].[Systems].[NEW_TechSupportExpDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Expiry date of support for the system ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Systems', @level2type = N'COLUMN', @level2name = N'NEW_TechSupportExpDate';


GO
PRINT N'Creating [audit].[Systems].[OLD_TechSupportExpDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Expiry date of support for the system ', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Systems', @level2type = N'COLUMN', @level2name = N'OLD_TechSupportExpDate';


GO
PRINT N'Creating [audit].[Systems].[NEW_RecSystemId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'New value - Identity reconciliation of data.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Systems', @level2type = N'COLUMN', @level2name = N'NEW_RecSystemId';


GO
PRINT N'Creating [audit].[Systems].[OLD_RecSystemId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Old value - Identity reconciliation of data.', @level0type = N'SCHEMA', @level0name = N'audit', @level1type = N'TABLE', @level1name = N'Systems', @level2type = N'COLUMN', @level2name = N'OLD_RecSystemId';


GO
PRINT N'Refreshing [recon].[MergeReconAccounts]...';


GO
EXECUTE sp_refreshsqlmodule N'[recon].[MergeReconAccounts]';


GO
-- Disable all the constraint in database
EXEC sp_msforeachtable "ALTER TABLE ? NOCHECK CONSTRAINT all"
GO

-- Reset identity 
PRINT 'Start Reset identity'
GO

DBCC CHECKIDENT ('gr_user.Users', RESEED, 0)
GO

DBCC CHECKIDENT ('repository.CountryRegion', RESEED, 0)
GO

DBCC CHECKIDENT ('error.ErrorMessages', RESEED, 0)
GO

DBCC CHECKIDENT ('repository.Accounts', RESEED, 0)
GO

DBCC CHECKIDENT ('repository.Servers', RESEED, 0)
GO

DBCC CHECKIDENT ('repository.Systems', RESEED, 0)
GO

DBCC CHECKIDENT ('recon.Accounts', RESEED, 0)
GO

DBCC CHECKIDENT ('recon.Servers', RESEED, 0)
GO

DBCC CHECKIDENT ('recon.Systems', RESEED, 0)
GO

DBCC CHECKIDENT ('audit.Accounts', RESEED, 0)
GO

DBCC CHECKIDENT ('audit.Servers', RESEED, 0)
GO

DBCC CHECKIDENT ('audit.Systems', RESEED, 0)
GO

PRINT 'Stop Reset identity'
GO

-- Delete data 
PRINT 'Start Delete data'
GO

DELETE FROM gr_user.Users
GO

DELETE FROM repository.CountryRegion
GO

DELETE FROM error.ErrorMessages
GO

DELETE FROM repository.Accounts
GO

DELETE FROM repository.Servers
GO

DELETE FROM repository.Systems
GO

DELETE FROM recon.Accounts
GO

DELETE FROM recon.Servers
GO

DELETE FROM recon.Systems
GO

DELETE FROM audit.Accounts
GO

DELETE FROM audit.Servers
GO

DELETE FROM audit.Systems
GO

PRINT 'Stop Delete data'
GO
---------------------------------------------------------
----------INSERT INTO gr_user.Users----------------------
---------------------------------------------------------
BEGIN TRAN INSERT_INTO_gr_user_Users
PRINT 'Start INSERT_INTO_gr_user_Users'

INSERT INTO gr_user.Users
           (ExternalId
           ,Description
           ,Username
           ,Password
           ,Type)
     VALUES
           (NEWID()
           ,'admin'
           ,'admin'
           ,EncryptByPassPhrase('GR','admin')
           ,'A')

INSERT INTO gr_user.Users
           (ExternalId
           ,Description
           ,Username
           ,Password
           ,Type)
     VALUES
           (NEWID()
           ,'lukasz'
           ,'lukasz'
           ,EncryptByPassPhrase('GR','test')
           ,'N')

PRINT 'Stop INSERT_INTO_gr_user_Users'
COMMIT TRAN INSERT_INTO_gr_user_Users
---------------------------------------------------------
----------INSERT INTO repository.CountryRegion-----------
---------------------------------------------------------

BEGIN TRAN INSERT_INTO_CountryRegion
PRINT 'Start INSERT_INTO_repository_CountryRegion'

INSERT INTO [repository].[CountryRegion] ([CountryRegionCode],[Name])

SELECT 
	[CountryRegionCode]
   ,[Name]
FROM 
	[AdventureWorks2017].[Person].[CountryRegion]

PRINT 'Stop INSERT_INTO_repository_CountryRegion'
COMMIT TRAN INSERT_INTO_CountryRegion
GO

---------------------------------------------------------
----------INSERT INTO repository.Servers----------------
---------------------------------------------------------

BEGIN TRAN INSERT_INTO_repository_Servers
PRINT 'Start INSERT_INTO_repository_Servers'
DECLARE 

@number int = 1,
@Name nvarchar(50) = 'Server_{0}',
@Host nvarchar(50) = 'GR.{0}.{1}.net',
@Model nvarchar(50) = '{0}.{1}.{2}.{3}',
@SerialNumber int

WHILE @number <= 237
BEGIN
INSERT INTO repository.Servers
           (
		    Name
           ,Host
           ,CountryId
           ,Model
           ,SerialNumber
           ,WarrantyExpirationDate
           ,CPUType
           ,RAM
           ,HardDisk
           ,UPS
           ,AntivirusSoftware)
     VALUES
           (replace(@Name,'{0}', cast(@number AS nvarchar(50)))
           ,replace (replace(@Host,'{0}',RIGHT( LEFT('6027893415',ABS(BINARY_CHECKSUM(NEWID())%35) + 1 ),1)),'{1}', RIGHT( LEFT('6893027415',ABS(BINARY_CHECKSUM(NEWID())%35) + 1 ),1))
           ,FLOOR(RAND()*(200-0+1))+10
           ,replace (replace (replace (replace(@Model,'{0}',RIGHT( LEFT('6893027415',ABS(BINARY_CHECKSUM(NEWID())%35) + 1 ),1)),'{1}', RIGHT( LEFT('6893027415',ABS(BINARY_CHECKSUM(NEWID())%35) + 1 ),1)),'{2}', RIGHT( LEFT('6893027415',ABS(BINARY_CHECKSUM(NEWID())%35) + 1 ),1)),'{3}',RIGHT( LEFT('6893027415',ABS(BINARY_CHECKSUM(NEWID())%35) + 1 ),1))
           ,CAST(RAND() * 1000000 AS INT)
           ,DATEADD(DAY, ABS(CHECKSUM(NEWID()) % 1650), '2018-01-01')
           ,64
           ,256
           ,RIGHT( LEFT('DS',ABS(BINARY_CHECKSUM(NEWID())%35) + 1 ),1)
           ,RIGHT( LEFT('01',ABS(BINARY_CHECKSUM(NEWID())%35) + 1 ),1)
           ,RIGHT( LEFT('01',ABS(BINARY_CHECKSUM(NEWID())%35) + 1 ),1)
		   )
    SET @number = @number + 1;
END
PRINT 'Stop INSERT_INTO_repository_Servers'
COMMIT TRAN INSERT_INTO_repository_Servers
GO

---------------------------------------------------------
----------INSERT INTO repository.Systems----------------
---------------------------------------------------------
BEGIN TRAN INSERT_INTO_repository_Systems
PRINT 'Start INSERT_INTO_repository_Systems'
DECLARE 

@number int = 1,
@Name nvarchar(50) = 'System_{0}',
@Version nvarchar(50) = '{0}.{1}.{2}.{3}'

WHILE @number <= 237
BEGIN
INSERT INTO repository.Systems
           (CompanyName
           ,Name
           ,Version
           ,TechSupportExpDate)
     VALUES
           (CASE WHEN RIGHT( LEFT('123',ABS(BINARY_CHECKSUM(NEWID())%35) + 1 ),1) = '1' then 'Microsoft' WHEN RIGHT( LEFT('123',ABS(BINARY_CHECKSUM(NEWID())%35) + 1 ),1) = '2' then 'Oracle' ELSE 'IBM' end
		   ,replace(@Name,'{0}', cast(@number AS nvarchar(50)))
           ,replace (replace (replace (replace(@Version,'{0}',RIGHT( LEFT('0123456789',ABS(BINARY_CHECKSUM(NEWID())%35) + 1 ),1)),'{1}', RIGHT( LEFT('0123456789',ABS(BINARY_CHECKSUM(NEWID())%35) + 1 ),1)),'{2}', RIGHT( LEFT('0123456789',ABS(BINARY_CHECKSUM(NEWID())%35) + 1 ),1)),'{3}',RIGHT( LEFT('0123456789',ABS(BINARY_CHECKSUM(NEWID())%35) + 1 ),1))
		   ,DATEADD(DAY, ABS(CHECKSUM(NEWID()) % 1650), '2018-01-01')
		   )
    SET @number = @number + 1;
END
PRINT 'Stop INSERT_INTO_repository_Systems'
COMMIT TRAN INSERT_INTO_repository_Systems
GO

---------------------------------------------------------
----------INSERT INTO repository.Accounts----------------
---------------------------------------------------------
BEGIN TRAN INSERT_INTO_repository_Accounts
PRINT 'Start INSERT_INTO_repository_Accounts'
DECLARE 
	@number int = 1,
	@Name nvarchar(50) = 'Konto',
	@PasswordExpires datetime = getdate()

WHILE @number <= 237
BEGIN
INSERT INTO repository.Accounts
           (CountryId 
		   ,UserId
           ,SystemId
           ,ServerId
           ,Name
           ,Type)
     VALUES
           (FLOOR(RAND()*(200-0+1))+10 
		   ,2
           ,@number
           ,@number
           ,@Name +'_'+ cast(@number AS nvarchar(100))
           ,RIGHT( LEFT('DU',ABS(BINARY_CHECKSUM(NEWID())%35) + 1 ),1))

    SET @number = @number + 1;
END
PRINT 'Stop INSERT_INTO_repository_Accounts'
COMMIT TRAN INSERT_INTO_repository_Accounts
GO


---------------------------------------------------------
--------------INSERT INTO recon.Servers------------------
---------------------------------------------------------
BEGIN TRAN INSERT_INTO_recon_Servers
PRINT 'Start INSERT_INTO_recon_Servers'
DECLARE 

@number int = 1

WHILE @number <= 100
BEGIN
	INSERT INTO  recon.Servers 
	(
		 ServerExId
		,Name
		,Host
		,CountryRegionCode
		,Model
		,SerialNumber
		,WarrantyExpirationDate
		,CPUType
        ,RAM
		,HardDisk
		,UPS
		,AntivirusSoftware
	)

	SELECT TOP (10) 
		 s.ExternalId
		,case 
			when s.Name like '%7%' then null
			else s.Name
			end as Name
		,s.Host
		,(select cr.CountryRegionCode from repository.CountryRegion cr WHERE cr.CountryId = FLOOR(RAND()*(s.ServerId-0+10))+10) AS CountryRegionCode
		,s.Model
		,s.SerialNumber
		,case 
			when s.WarrantyExpirationDate < getdate()
			THEN DATEADD(DAY,10,s.WarrantyExpirationDate)
			ELSE s.WarrantyExpirationDate
			END AS WarrantyExpirationDate
		,s.CPUType
        ,s.RAM
		,case 
			when s.Name like '%1%' then null
			else s.HardDisk
			end as HardDisk
		,s.UPS
		,s.AntivirusSoftware
	FROM 
		repository.Servers s
	ORDER BY NEWID()

    SET @number = @number + 1;
END
PRINT 'Stop INSERT_INTO_recon_Servers'
COMMIT TRAN INSERT_INTO_recon_Servers
GO

---------------------------------------------------------
----------------INSERT INTO recon.Systems----------------
---------------------------------------------------------
BEGIN TRAN INSERT_INTO_recon_Systems
PRINT 'Start INSERT_INTO_recon_Systems'
DECLARE 

@number int = 1

WHILE @number <= 100
BEGIN
INSERT INTO recon.Systems
           (
		    SystemExId
		   ,CompanyName
           ,Name
           ,Version
           ,TechSupportExpDate)
	 SELECT TOP (10) 
		 ExternalId
		,case 
			when Name like '%8%' then null
			else CompanyName
			end as CompanyName
		,Name
		,Version
		,case 
			when TechSupportExpDate < getdate()
			THEN DATEADD(DAY,10,TechSupportExpDate)
			ELSE TechSupportExpDate
			END AS TechSupportExpDate
	FROM 
		repository.Systems
	ORDER BY NEWID()

    SET @number = @number + 1;
END
PRINT 'Stop INSERT_INTO_recon_Systems'
COMMIT TRAN INSERT_INTO_recon_Systems
GO

---------------------------------------------------------
----------INSERT INTO recon.Accounts----------------
---------------------------------------------------------
BEGIN TRAN INSERT_INTO_recon_Accounts
PRINT 'Start INSERT_INTO_recon_Accounts'
DECLARE 
	@number int = 1,
	@Name nvarchar(50) = 'Konto',
	@PasswordExpires datetime = getdate()

WHILE @number <= 100
BEGIN
INSERT INTO recon.Accounts
           (AccountExId
		   ,CountryRegionCode 
		   ,SystemExId
		   ,ServerExId
           ,Name
		   ,Description
           ,Type)

		   SELECT TOP (10)
			 a.ExternalId
			,(select cr.CountryRegionCode from repository.CountryRegion cr WHERE cr.CountryId = FLOOR(RAND()*(a.AccountId-0+10))+10) AS CountryRegionCode
			,s2.ExternalId AS SystemExId
			,s.ExternalId AS ServerExId
			,case 
				when a.Name LIKE '%1%' THEN NULL
				ELSE a.Name 
				END AS Name
			,case 
				when a.Name LIKE '%5%' THEN 'Test'
				ELSE Description
				END AS Description
			,Type
		FROM 
			repository.Accounts a
			LEFT JOIN repository.Servers s ON s.ServerId = a.ServerId
			LEFT JOIN repository.Systems s2 ON s2.SystemId = a.SystemId
		ORDER BY NEWID()

    SET @number = @number + 1;
END
PRINT 'Stop INSERT_INTO_recon_Accounts'
COMMIT TRAN INSERT_INTO_recon_Accounts
GO

-- Enable all the constraint in database
EXEC sp_msforeachtable "ALTER TABLE ? WITH CHECK CHECK CONSTRAINT all"
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'repository.Accounts'), OBJECT_ID(N'gr_user.Users'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
